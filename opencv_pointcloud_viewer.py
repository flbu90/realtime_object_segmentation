{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# License: Apache 2.0. See LICENSE file in root directory.\n",
    "# Copyright(c) 2015-2017 Intel Corporation. All Rights Reserved.\n",
    "\n",
    "\"\"\"\n",
    "OpenCV and Numpy Point cloud Software Renderer\n",
    "This sample is mostly for demonstration and educational purposes.\n",
    "It really doesn't offer the quality or performance that can be\n",
    "achieved with hardware acceleration.\n",
    "Usage:\n",
    "------\n",
    "Mouse: \n",
    "    Drag with left button to rotate around pivot (thick small axes), \n",
    "    with right button to translate and the wheel to zoom.\n",
    "Keyboard: \n",
    "    [p]     Pause\n",
    "    [r]     Reset View\n",
    "    [d]     Cycle through decimation values\n",
    "    [z]     Toggle point scaling\n",
    "    [c]     Toggle color source\n",
    "    [s]     Save PNG (./out.png)\n",
    "    [e]     Export points to ply (./out.ply)\n",
    "    [q\\ESC] Quit\n",
    "\"\"\"\n",
    "\n",
    "import math\n",
    "import time\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pyrealsense2 as rs\n",
    "\n",
    "\n",
    "class AppState:\n",
    "\n",
    "    def __init__(self, *args, **kwargs):\n",
    "        self.WIN_NAME = 'RealSense'\n",
    "        self.pitch, self.yaw = math.radians(-10), math.radians(-15)\n",
    "        self.translation = np.array([0, 0, -1], dtype=np.float32)\n",
    "        self.distance = 2\n",
    "        self.prev_mouse = 0, 0\n",
    "        self.mouse_btns = [False, False, False]\n",
    "        self.paused = False\n",
    "        self.decimate = 1\n",
    "        self.scale = True\n",
    "        self.color = True\n",
    "\n",
    "    def reset(self):\n",
    "        self.pitch, self.yaw, self.distance = 0, 0, 2\n",
    "        self.translation[:] = 0, 0, -1\n",
    "\n",
    "    @property\n",
    "    def rotation(self):\n",
    "        Rx, _ = cv2.Rodrigues((self.pitch, 0, 0))\n",
    "        Ry, _ = cv2.Rodrigues((0, self.yaw, 0))\n",
    "        return np.dot(Ry, Rx).astype(np.float32)\n",
    "\n",
    "    @property\n",
    "    def pivot(self):\n",
    "        return self.translation + np.array((0, 0, self.distance), dtype=np.float32)\n",
    "\n",
    "\n",
    "state = AppState()\n",
    "\n",
    "# Configure depth and color streams\n",
    "pipeline = rs.pipeline()\n",
    "config = rs.config()\n",
    "config.enable_stream(rs.stream.depth, 640, 480, rs.format.z16, 30)\n",
    "config.enable_stream(rs.stream.color, 640, 480, rs.format.bgr8, 30)\n",
    "\n",
    "# Start streaming\n",
    "pipeline.start(config)\n",
    "\n",
    "# Get stream profile and camera intrinsics\n",
    "profile = pipeline.get_active_profile()\n",
    "depth_profile = rs.video_stream_profile(profile.get_stream(rs.stream.depth))\n",
    "depth_intrinsics = depth_profile.get_intrinsics()\n",
    "w, h = depth_intrinsics.width, depth_intrinsics.height\n",
    "\n",
    "# Processing blocks\n",
    "pc = rs.pointcloud()\n",
    "decimate = rs.decimation_filter()\n",
    "decimate.set_option(rs.option.filter_magnitude, 2 ** state.decimate)\n",
    "colorizer = rs.colorizer()\n",
    "\n",
    "\n",
    "def mouse_cb(event, x, y, flags, param):\n",
    "\n",
    "    if event == cv2.EVENT_LBUTTONDOWN:\n",
    "        state.mouse_btns[0] = True\n",
    "\n",
    "    if event == cv2.EVENT_LBUTTONUP:\n",
    "        state.mouse_btns[0] = False\n",
    "\n",
    "    if event == cv2.EVENT_RBUTTONDOWN:\n",
    "        state.mouse_btns[1] = True\n",
    "\n",
    "    if event == cv2.EVENT_RBUTTONUP:\n",
    "        state.mouse_btns[1] = False\n",
    "\n",
    "    if event == cv2.EVENT_MBUTTONDOWN:\n",
    "        state.mouse_btns[2] = True\n",
    "\n",
    "    if event == cv2.EVENT_MBUTTONUP:\n",
    "        state.mouse_btns[2] = False\n",
    "\n",
    "    if event == cv2.EVENT_MOUSEMOVE:\n",
    "\n",
    "        h, w = out.shape[:2]\n",
    "        dx, dy = x - state.prev_mouse[0], y - state.prev_mouse[1]\n",
    "\n",
    "        if state.mouse_btns[0]:\n",
    "            state.yaw += float(dx) / w * 2\n",
    "            state.pitch -= float(dy) / h * 2\n",
    "\n",
    "        elif state.mouse_btns[1]:\n",
    "            dp = np.array((dx / w, dy / h, 0), dtype=np.float32)\n",
    "            state.translation -= np.dot(state.rotation, dp)\n",
    "\n",
    "        elif state.mouse_btns[2]:\n",
    "            dz = math.sqrt(dx**2 + dy**2) * math.copysign(0.01, -dy)\n",
    "            state.translation[2] += dz\n",
    "            state.distance -= dz\n",
    "\n",
    "    if event == cv2.EVENT_MOUSEWHEEL:\n",
    "        dz = math.copysign(0.1, flags)\n",
    "        state.translation[2] += dz\n",
    "        state.distance -= dz\n",
    "\n",
    "    state.prev_mouse = (x, y)\n",
    "\n",
    "\n",
    "cv2.namedWindow(state.WIN_NAME, cv2.WINDOW_AUTOSIZE)\n",
    "cv2.resizeWindow(state.WIN_NAME, w, h)\n",
    "cv2.setMouseCallback(state.WIN_NAME, mouse_cb)\n",
    "\n",
    "\n",
    "def project(v):\n",
    "    \"\"\"project 3d vector array to 2d\"\"\"\n",
    "    h, w = out.shape[:2]\n",
    "    view_aspect = float(h)/w\n",
    "\n",
    "    # ignore divide by zero for invalid depth\n",
    "    with np.errstate(divide='ignore', invalid='ignore'):\n",
    "        proj = v[:, :-1] / v[:, -1, np.newaxis] * \\\n",
    "            (w*view_aspect, h) + (w/2.0, h/2.0)\n",
    "\n",
    "    # near clipping\n",
    "    znear = 0.03\n",
    "    proj[v[:, 2] < znear] = np.nan\n",
    "    return proj\n",
    "\n",
    "\n",
    "def view(v):\n",
    "    \"\"\"apply view transformation on vector array\"\"\"\n",
    "    return np.dot(v - state.pivot, state.rotation) + state.pivot - state.translation\n",
    "\n",
    "\n",
    "def line3d(out, pt1, pt2, color=(0x80, 0x80, 0x80), thickness=1):\n",
    "    \"\"\"draw a 3d line from pt1 to pt2\"\"\"\n",
    "    p0 = project(pt1.reshape(-1, 3))[0]\n",
    "    p1 = project(pt2.reshape(-1, 3))[0]\n",
    "    if np.isnan(p0).any() or np.isnan(p1).any():\n",
    "        return\n",
    "    p0 = tuple(p0.astype(int))\n",
    "    p1 = tuple(p1.astype(int))\n",
    "    rect = (0, 0, out.shape[1], out.shape[0])\n",
    "    inside, p0, p1 = cv2.clipLine(rect, p0, p1)\n",
    "    if inside:\n",
    "        cv2.line(out, p0, p1, color, thickness, cv2.LINE_AA)\n",
    "\n",
    "\n",
    "def grid(out, pos, rotation=np.eye(3), size=1, n=10, color=(0x80, 0x80, 0x80)):\n",
    "    \"\"\"draw a grid on xz plane\"\"\"\n",
    "    pos = np.array(pos)\n",
    "    s = size / float(n)\n",
    "    s2 = 0.5 * size\n",
    "    for i in range(0, n+1):\n",
    "        x = -s2 + i*s\n",
    "        line3d(out, view(pos + np.dot((x, 0, -s2), rotation)),\n",
    "               view(pos + np.dot((x, 0, s2), rotation)), color)\n",
    "    for i in range(0, n+1):\n",
    "        z = -s2 + i*s\n",
    "        line3d(out, view(pos + np.dot((-s2, 0, z), rotation)),\n",
    "               view(pos + np.dot((s2, 0, z), rotation)), color)\n",
    "\n",
    "\n",
    "def axes(out, pos, rotation=np.eye(3), size=0.075, thickness=2):\n",
    "    \"\"\"draw 3d axes\"\"\"\n",
    "    line3d(out, pos, pos +\n",
    "           np.dot((0, 0, size), rotation), (0xff, 0, 0), thickness)\n",
    "    line3d(out, pos, pos +\n",
    "           np.dot((0, size, 0), rotation), (0, 0xff, 0), thickness)\n",
    "    line3d(out, pos, pos +\n",
    "           np.dot((size, 0, 0), rotation), (0, 0, 0xff), thickness)\n",
    "\n",
    "\n",
    "def frustum(out, intrinsics, color=(0x40, 0x40, 0x40)):\n",
    "    \"\"\"draw camera's frustum\"\"\"\n",
    "    orig = view([0, 0, 0])\n",
    "    w, h = intrinsics.width, intrinsics.height\n",
    "\n",
    "    for d in range(1, 6, 2):\n",
    "        def get_point(x, y):\n",
    "            p = rs.rs2_deproject_pixel_to_point(intrinsics, [x, y], d)\n",
    "            line3d(out, orig, view(p), color)\n",
    "            return p\n",
    "\n",
    "        top_left = get_point(0, 0)\n",
    "        top_right = get_point(w, 0)\n",
    "        bottom_right = get_point(w, h)\n",
    "        bottom_left = get_point(0, h)\n",
    "\n",
    "        line3d(out, view(top_left), view(top_right), color)\n",
    "        line3d(out, view(top_right), view(bottom_right), color)\n",
    "        line3d(out, view(bottom_right), view(bottom_left), color)\n",
    "        line3d(out, view(bottom_left), view(top_left), color)\n",
    "\n",
    "\n",
    "def pointcloud(out, verts, texcoords, color, painter=True):\n",
    "    \"\"\"draw point cloud with optional painter's algorithm\"\"\"\n",
    "    if painter:\n",
    "        # Painter's algo, sort points from back to front\n",
    "\n",
    "        # get reverse sorted indices by z (in view-space)\n",
    "        # https://gist.github.com/stevenvo/e3dad127598842459b68\n",
    "        v = view(verts)\n",
    "        s = v[:, 2].argsort()[::-1]\n",
    "        proj = project(v[s])\n",
    "    else:\n",
    "        proj = project(view(verts))\n",
    "\n",
    "    if state.scale:\n",
    "        proj *= 0.5**state.decimate\n",
    "\n",
    "    h, w = out.shape[:2]\n",
    "\n",
    "    # proj now contains 2d image coordinates\n",
    "    j, i = proj.astype(np.uint32).T\n",
    "\n",
    "    # create a mask to ignore out-of-bound indices\n",
    "    im = (i >= 0) & (i < h)\n",
    "    jm = (j >= 0) & (j < w)\n",
    "    m = im & jm\n",
    "\n",
    "    cw, ch = color.shape[:2][::-1]\n",
    "    if painter:\n",
    "        # sort texcoord with same indices as above\n",
    "        # texcoords are [0..1] and relative to top-left pixel corner,\n",
    "        # multiply by size and add 0.5 to center\n",
    "        v, u = (texcoords[s] * (cw, ch) + 0.5).astype(np.uint32).T\n",
    "    else:\n",
    "        v, u = (texcoords * (cw, ch) + 0.5).astype(np.uint32).T\n",
    "    # clip texcoords to image\n",
    "    np.clip(u, 0, ch-1, out=u)\n",
    "    np.clip(v, 0, cw-1, out=v)\n",
    "\n",
    "    # perform uv-mapping\n",
    "    out[i[m], j[m]] = color[u[m], v[m]]\n",
    "\n",
    "\n",
    "out = np.empty((h, w, 3), dtype=np.uint8)\n",
    "\n",
    "while True:\n",
    "    # Grab camera data\n",
    "    if not state.paused:\n",
    "        # Wait for a coherent pair of frames: depth and color\n",
    "        frames = pipeline.wait_for_frames()\n",
    "\n",
    "        depth_frame = frames.get_depth_frame()\n",
    "        color_frame = frames.get_color_frame()\n",
    "\n",
    "        depth_frame = decimate.process(depth_frame)\n",
    "\n",
    "        # Grab new intrinsics (may be changed by decimation)\n",
    "        depth_intrinsics = rs.video_stream_profile(\n",
    "            depth_frame.profile).get_intrinsics()\n",
    "        w, h = depth_intrinsics.width, depth_intrinsics.height\n",
    "\n",
    "        depth_image = np.asanyarray(depth_frame.get_data())\n",
    "        color_image = np.asanyarray(color_frame.get_data())\n",
    "\n",
    "        depth_colormap = np.asanyarray(\n",
    "            colorizer.colorize(depth_frame).get_data())\n",
    "\n",
    "        if state.color:\n",
    "            mapped_frame, color_source = color_frame, color_image\n",
    "        else:\n",
    "            mapped_frame, color_source = depth_frame, depth_colormap\n",
    "\n",
    "        points = pc.calculate(depth_frame)\n",
    "        pc.map_to(mapped_frame)\n",
    "\n",
    "        # Pointcloud data to arrays\n",
    "        v, t = points.get_vertices(), points.get_texture_coordinates()\n",
    "        verts = np.asanyarray(v).view(np.float32).reshape(-1, 3)  # xyz\n",
    "        texcoords = np.asanyarray(t).view(np.float32).reshape(-1, 2)  # uv\n",
    "\n",
    "    # Render\n",
    "    now = time.time()\n",
    "\n",
    "    out.fill(0)\n",
    "\n",
    "    grid(out, (0, 0.5, 1), size=1, n=10)\n",
    "    frustum(out, depth_intrinsics)\n",
    "    axes(out, view([0, 0, 0]), state.rotation, size=0.1, thickness=1)\n",
    "\n",
    "    if not state.scale or out.shape[:2] == (h, w):\n",
    "        pointcloud(out, verts, texcoords, color_source)\n",
    "    else:\n",
    "        tmp = np.zeros((h, w, 3), dtype=np.uint8)\n",
    "        pointcloud(tmp, verts, texcoords, color_source)\n",
    "        tmp = cv2.resize(\n",
    "            tmp, out.shape[:2][::-1], interpolation=cv2.INTER_NEAREST)\n",
    "        np.putmask(out, tmp > 0, tmp)\n",
    "\n",
    "    if any(state.mouse_btns):\n",
    "        axes(out, view(state.pivot), state.rotation, thickness=4)\n",
    "\n",
    "    dt = time.time() - now\n",
    "\n",
    "    cv2.setWindowTitle(\n",
    "        state.WIN_NAME, \"RealSense (%dx%d) %dFPS (%.2fms) %s\" %\n",
    "        (w, h, 1.0/dt, dt*1000, \"PAUSED\" if state.paused else \"\"))\n",
    "\n",
    "    cv2.imshow(state.WIN_NAME, out)\n",
    "    key = cv2.waitKey(1)\n",
    "\n",
    "    if key == ord(\"r\"):\n",
    "        state.reset()\n",
    "\n",
    "    if key == ord(\"p\"):\n",
    "        state.paused ^= True\n",
    "\n",
    "    if key == ord(\"d\"):\n",
    "        state.decimate = (state.decimate + 1) % 3\n",
    "        decimate.set_option(rs.option.filter_magnitude, 2 ** state.decimate)\n",
    "\n",
    "    if key == ord(\"z\"):\n",
    "        state.scale ^= True\n",
    "\n",
    "    if key == ord(\"c\"):\n",
    "        state.color ^= True\n",
    "\n",
    "    if key == ord(\"s\"):\n",
    "        cv2.imwrite('./out.png', out)\n",
    "\n",
    "    if key == ord(\"e\"):\n",
    "        points.export_to_ply('./out.ply', mapped_frame)\n",
    "\n",
    "    if key in (27, ord(\"q\")) or cv2.getWindowProperty(state.WIN_NAME, cv2.WND_PROP_AUTOSIZE) < 0:\n",
    "        break\n",
    "\n",
    "# Stop streaming\n",
    "pipeline.stop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
